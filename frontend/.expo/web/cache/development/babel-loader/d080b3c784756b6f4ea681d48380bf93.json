{
	"ast": null,
	"code": "import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  var _useState5 = useState('Not yet scanned'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      text = _useState6[0],\n      setText = _useState6[1];\n\n  var askForCameraPermission = function askForCameraPermission() {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  };\n\n  useEffect(function () {\n    askForCameraPermission();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    setText(data);\n    console.log('Type: ' + type + '\\nData: ' + data);\n  };\n\n  if (hasPermission === null) {\n    return _jsx(View, {\n      style: styles.container,\n      children: _jsx(Text, {\n        children: \"Requesting for camera permission\"\n      })\n    });\n  }\n\n  if (hasPermission === false) {\n    return _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Text, {\n        style: {\n          margin: 10\n        },\n        children: \"No access to camera\"\n      }), _jsx(Button, {\n        title: 'Allow Camera',\n        onPress: function onPress() {\n          return askForCameraPermission();\n        }\n      })]\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.barcodebox,\n      children: _jsx(BarCodeScanner, {\n        onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n        style: {\n          height: 400,\n          width: 400\n        }\n      })\n    }), _jsx(Text, {\n      style: styles.maintext,\n      children: text\n    }), scanned && _jsx(Button, {\n      title: 'Scan again?',\n      onPress: function onPress() {\n        return setScanned(false);\n      },\n      color: \"tomato\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  maintext: {\n    fontSize: 16,\n    margin: 20\n  },\n  barcodebox: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 500,\n    width: 500,\n    overflow: 'hidden',\n    borderRadius: 30,\n    backgroundColor: 'white'\n  }\n});",
	"map": {
		"version": 3,
		"sources": ["/Users/llh/Documents/map/frontend/screens/check-user/View.js"],
		"names": [
			"React",
			"useState",
			"useEffect",
			"BarCodeScanner",
			"App",
			"hasPermission",
			"setHasPermission",
			"scanned",
			"setScanned",
			"text",
			"setText",
			"askForCameraPermission",
			"requestPermissionsAsync",
			"status",
			"handleBarCodeScanned",
			"type",
			"data",
			"console",
			"log",
			"styles",
			"container",
			"margin",
			"barcodebox",
			"undefined",
			"height",
			"width",
			"maintext",
			"StyleSheet",
			"create",
			"flex",
			"backgroundColor",
			"alignItems",
			"justifyContent",
			"fontSize",
			"overflow",
			"borderRadius"
		],
		"mappings": "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",
		"sourcesContent": [
			"import React, { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nexport default function App() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n  const [text, setText] = useState('Not yet scanned')\n\n  const askForCameraPermission = () => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })()\n  }\n\n  // Request Camera Permission\n  useEffect(() => {\n    askForCameraPermission();\n  }, []);\n\n  // What happens when we scan the bar code\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    setText(data)\n    console.log('Type: ' + type + '\\nData: ' + data)\n  };\n\n  // Check permissions and return the screens\n  if (hasPermission === null) {\n    return (\n      <View style={styles.container}>\n        <Text>Requesting for camera permission</Text>\n      </View>)\n  }\n  if (hasPermission === false) {\n    return (\n      <View style={styles.container}>\n        <Text style={{ margin: 10 }}>No access to camera</Text>\n        <Button title={'Allow Camera'} onPress={() => askForCameraPermission()} />\n      </View>)\n  }\n\n  // Return the View\n  return (\n    <View style={styles.container}>\n      <View style={styles.barcodebox}>\n        <BarCodeScanner\n          onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n          style={{ height: 400, width: 400 }} />\n      </View>\n      <Text style={styles.maintext}>{text}</Text>\n\n      {scanned && <Button title={'Scan again?'} onPress={() => setScanned(false)} color='tomato' />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  maintext: {\n    fontSize: 16,\n    margin: 20,\n  },\n  barcodebox: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 500,\n    width: 500,\n    overflow: 'hidden',\n    borderRadius: 30,\n    backgroundColor: 'white'\n  }\n});"
		]
	},
	"metadata": {},
	"sourceType": "module"
}
