{
	"ast": null,
	"code": "import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport MapView, { PROVIDER_GOOGLE, Marker } from \"react-native-maps\";\nimport StarRating from \"../../components/StarRating\";\nimport styles from \"./style\";\nimport markers from \"../../data/mapData\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar CARD_HEIGHT = 220;\nvar CARD_WIDTH = width * 0.8;\nvar CARD_SPACING = width * 0.1 - 10;\n\nvar ExploreScreen = function ExploreScreen() {\n  var initialState = {\n    markers: markers,\n    region: {\n      latitude: 40.729035,\n      longitude: -73.996271,\n      latitudeDelta: 0.015,\n      longitudeDelta: 0.015\n    }\n  };\n\n  var _React$useState = React.useState(initialState),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var mapRef = React.useRef(null);\n  var viewRef = React.useRef(null);\n\n  var onMarkerPress = function onMarkerPress(mapEventData) {\n    var markerID = mapEventData._targetInst.return.key;\n    var x = markerID * CARD_WIDTH + markerID * 20;\n    viewRef.current.scrollTo({\n      x: x,\n      y: 0\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(MapView, {\n      ref: mapRef,\n      initialRegion: state.region,\n      style: styles.container,\n      provider: PROVIDER_GOOGLE,\n      rotateEnabled: true,\n      children: state.markers.map(function (marker, index) {\n        return _jsx(Marker, {\n          coordinate: marker.coordinate,\n          onPress: function onPress(e) {\n            return onMarkerPress(e);\n          }\n        }, index);\n      })\n    }), _jsx(ScrollView, {\n      ref: viewRef,\n      horizontal: true,\n      pagingEnabled: true,\n      showsHorizontalScrollIndicator: false,\n      snapToInterval: CARD_WIDTH + 20,\n      snapToAlignment: \"center\",\n      style: styles.scrollView,\n      contentInset: {\n        top: 0,\n        left: CARD_SPACING,\n        bottom: 0,\n        right: CARD_SPACING\n      },\n      children: state.markers.map(function (marker, index) {\n        return _jsxs(View, {\n          style: styles.card,\n          children: [_jsx(Image, {\n            source: marker.image,\n            style: styles.cardImage,\n            resizeMode: \"cover\"\n          }), _jsxs(View, {\n            style: styles.textContent,\n            children: [_jsx(Text, {\n              style: styles.cardtitle,\n              children: marker.title\n            }), _jsx(StarRating, {\n              ratings: marker.rating,\n              reviews: marker.reviews\n            })]\n          }), _jsxs(View, {\n            style: styles.buttons,\n            children: [_jsx(View, {\n              style: styles.button,\n              children: _jsx(TouchableOpacity, {\n                onPress: function onPress() {},\n                style: [styles.signIn, {\n                  borderColor: 'red',\n                  borderWidth: 1\n                }],\n                children: _jsx(Text, {\n                  style: [styles.textSign, {\n                    color: 'red'\n                  }],\n                  children: \"Check In\"\n                })\n              })\n            }), _jsx(View, {\n              style: styles.button,\n              children: _jsx(TouchableOpacity, {\n                onPress: function onPress() {},\n                style: [styles.signIn, {\n                  borderColor: 'purple',\n                  borderWidth: 1\n                }],\n                children: _jsx(Text, {\n                  style: [styles.textSign, {\n                    color: 'purple'\n                  }],\n                  children: \"Reviews\"\n                })\n              })\n            })]\n          })]\n        }, index);\n      })\n    })]\n  });\n};\n\nexport default ExploreScreen;",
	"map": {
		"version": 3,
		"sources": ["/Users/llh/Documents/map/frontend/screens/map/View.js"],
		"names": [
			"React",
			"MapView",
			"PROVIDER_GOOGLE",
			"Marker",
			"StarRating",
			"styles",
			"markers",
			"Dimensions",
			"get",
			"width",
			"height",
			"CARD_HEIGHT",
			"CARD_WIDTH",
			"CARD_SPACING",
			"ExploreScreen",
			"initialState",
			"region",
			"latitude",
			"longitude",
			"latitudeDelta",
			"longitudeDelta",
			"useState",
			"state",
			"setState",
			"mapRef",
			"useRef",
			"viewRef",
			"onMarkerPress",
			"mapEventData",
			"markerID",
			"_targetInst",
			"return",
			"key",
			"x",
			"current",
			"scrollTo",
			"y",
			"container",
			"map",
			"marker",
			"index",
			"coordinate",
			"e",
			"scrollView",
			"top",
			"left",
			"bottom",
			"right",
			"card",
			"image",
			"cardImage",
			"textContent",
			"cardtitle",
			"title",
			"rating",
			"reviews",
			"buttons",
			"button",
			"signIn",
			"borderColor",
			"borderWidth",
			"textSign",
			"color"
		],
		"mappings": "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",
		"sourcesContent": [
			"import React from 'react';\nimport { StyleSheet, Text, View, ScrollView, Image, TouchableOpacity, Dimensions } from \"react-native\";\nimport MapView, { PROVIDER_GOOGLE, Marker } from \"react-native-maps\";\n\nimport StarRating from '../../components/StarRating';\nimport styles from './style';\nimport markers from '../../data/mapData';\n\n\nconst { width, height } = Dimensions.get(\"window\");\nconst CARD_HEIGHT = 220;\nconst CARD_WIDTH = width * 0.8;\nconst CARD_SPACING = width * 0.1 - 10;\n\nconst ExploreScreen = () => {\n\n  const initialState = {\n    markers,\n    region: {\n        latitude: 40.729035,\n        longitude: -73.996271,\n        latitudeDelta: 0.015,\n        longitudeDelta: 0.015,\n    },\n  };\n\n  const [state, setState] = React.useState(initialState);\n  const mapRef = React.useRef(null);\n  const viewRef = React.useRef(null);\n\n  const onMarkerPress = (mapEventData) => {\n    const markerID = mapEventData._targetInst.return.key;\n\n    let x = (markerID * CARD_WIDTH) + (markerID * 20); \n\n    viewRef.current.scrollTo({x: x, y: 0});\n  }\n\n  return (\n    <View style={styles.container}>\n      <MapView\n        ref={mapRef}\n        initialRegion={state.region}\n        style={styles.container}\n        provider={PROVIDER_GOOGLE}\n        rotateEnabled={true}\n      >\n        {state.markers.map((marker, index) => {\n          return (\n            <Marker key={index} coordinate={marker.coordinate} onPress={(e)=>onMarkerPress(e)} />\n          );\n        })}\n      </MapView>\n\n      \n\n      <ScrollView\n        ref={viewRef}\n        horizontal\n        pagingEnabled\n        showsHorizontalScrollIndicator={false}\n        snapToInterval={CARD_WIDTH + 20}\n        snapToAlignment=\"center\"\n        style={styles.scrollView}\n        contentInset={{ top: 0, left: CARD_SPACING, bottom: 0, right: CARD_SPACING }}\n      >\n        {state.markers.map((marker, index) =>(\n          <View style={styles.card} key={index}>\n            <Image \n              source={marker.image}\n              style={styles.cardImage}\n              resizeMode=\"cover\"\n            />\n            <View style={styles.textContent}>\n                <Text style={styles.cardtitle}>{marker.title}</Text>\n              <StarRating ratings={marker.rating} reviews={marker.reviews} />\n            </View>\n\n            <View style={styles.buttons}>\n            <View style={styles.button}>\n                <TouchableOpacity\n                  onPress={() => {}}\n                  style={[styles.signIn, {\n                    borderColor: 'red',\n                    borderWidth: 1\n                  }]}\n                >\n                  <Text style={[styles.textSign, {\n                    color: 'red'\n                  }]}>Check In</Text>\n                </TouchableOpacity>\n              </View>\n              <View style={styles.button}>\n                <TouchableOpacity\n                  onPress={() => {}}\n                  style={[styles.signIn, {\n                    borderColor: 'purple',\n                    borderWidth: 1\n                  }]}\n                >\n                  <Text style={[styles.textSign, {\n                    color: 'purple'\n                  }]}>Reviews</Text>\n                </TouchableOpacity>\n              </View>\n              </View>\n          </View>\n        ))}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default ExploreScreen;"
		]
	},
	"metadata": {},
	"sourceType": "module"
}
